\BOOKMARK [1][-]{table.1}{TABLE OF CONTENTS}{}% 1
\BOOKMARK [0][-]{section*.2}{LIST OF TABLES}{}% 2
\BOOKMARK [0][-]{section*.4}{LIST OF FIGURES}{}% 3
\BOOKMARK [0][-]{section*.6}{ACKNOWLEDGEMENTS}{}% 4
\BOOKMARK [0][-]{section*.7}{ABSTRACT}{}% 5
\BOOKMARK [0][-]{chapter.8}{1. Introduction}{}% 6
\BOOKMARK [0][-]{chapter.14}{2. Contributions}{}% 7
\BOOKMARK [1][-]{section.15}{2.1 Traversal Declaration and Traverse Expression}{chapter.14}% 8
\BOOKMARK [1][-]{section.16}{2.2 Data-Flow and Loop Sensitivity Analyses for Traversals}{chapter.14}% 9
\BOOKMARK [1][-]{section.17}{2.3 Graph Cyclicity}{chapter.14}% 10
\BOOKMARK [1][-]{section.18}{2.4 Decision Tree for Traversal Strategy Selection}{chapter.14}% 11
\BOOKMARK [1][-]{section.19}{2.5 Evaluation Contribution}{chapter.14}% 12
\BOOKMARK [0][-]{chapter.20}{3. Background}{}% 13
\BOOKMARK [1][-]{section.21}{3.1 Graph}{chapter.20}% 14
\BOOKMARK [1][-]{section.22}{3.2 Graph traversal}{chapter.20}% 15
\BOOKMARK [1][-]{section.23}{3.3 Graph traversal strategies}{chapter.20}% 16
\BOOKMARK [2][-]{subsection.24}{3.3.1 Depth-first search}{section.23}% 17
\BOOKMARK [2][-]{subsection.25}{3.3.2 Breadth-first search}{section.23}% 18
\BOOKMARK [1][-]{section.26}{3.4 Program analysis}{chapter.20}% 19
\BOOKMARK [1][-]{section.27}{3.5 Control-flow and Data flow analysis}{chapter.20}% 20
\BOOKMARK [1][-]{section.28}{3.6 Graph traversal for Program analysis}{chapter.20}% 21
\BOOKMARK [2][-]{subsection.29}{3.6.1 Random order}{section.28}% 22
\BOOKMARK [2][-]{subsection.30}{3.6.2 Postorder}{section.28}% 23
\BOOKMARK [2][-]{subsection.31}{3.6.3 Reverse postorder}{section.28}% 24
\BOOKMARK [0][-]{chapter.32}{4. Hybrid Traversal Selection for Efficient Source Code Analysis}{}% 25
\BOOKMARK [1][-]{section.34}{4.1 A System For Expressing Source Code Analysis As Traversals}{chapter.32}% 26
\BOOKMARK [1][-]{section.74}{4.2 Static and Runtime Properties}{chapter.32}% 27
\BOOKMARK [2][-]{subsection.75}{4.2.1 Data-Flow Sensitivity}{section.74}% 28
\BOOKMARK [2][-]{subsection.86}{4.2.2 Computing Data-Flow Sensitivity}{section.74}% 29
\BOOKMARK [2][-]{subsection.88}{4.2.3 Loop Sensitivity}{section.74}% 30
\BOOKMARK [2][-]{subsection.124}{4.2.4 Computing Loop Sensitivity}{section.74}% 31
\BOOKMARK [2][-]{subsection.127}{4.2.5 Graph Cyclicity}{section.74}% 32
\BOOKMARK [1][-]{section.128}{4.3 Traversal Strategies - Candidates}{chapter.32}% 33
\BOOKMARK [1][-]{section.130}{4.4 Decision Tree for Traversal Strategy Selection}{chapter.32}% 34
\BOOKMARK [2][-]{subsection.132}{4.4.1 An Example}{section.130}% 35
\BOOKMARK [1][-]{section.133}{4.5 Optimizing the Selected Traversal Strategy}{chapter.32}% 36
\BOOKMARK [0][-]{chapter.134}{5. Implementation on Boa framework}{}% 37
\BOOKMARK [1][-]{section.135}{5.1 Boa language and infrastructure}{chapter.134}% 38
\BOOKMARK [1][-]{section.136}{5.2 Source code analysis using Traversal construct}{chapter.134}% 39
\BOOKMARK [1][-]{section.268}{5.3 Putting it all together}{chapter.134}% 40
\BOOKMARK [0][-]{chapter.339}{6. Empirical Evaluation}{}% 41
\BOOKMARK [1][-]{section.340}{6.1 Analyses, Datasets and Experiment Setting}{chapter.339}% 42
\BOOKMARK [2][-]{subsection.342}{6.1.1 Analyses.}{section.340}% 43
\BOOKMARK [2][-]{subsection.345}{6.1.2 Datasets.}{section.340}% 44
\BOOKMARK [2][-]{subsection.346}{6.1.3 Setting.}{section.340}% 45
\BOOKMARK [0][-]{chapter.347}{7. Running Time and Time Reduction}{}% 46
\BOOKMARK [1][-]{section.348}{7.1 Running Time}{chapter.347}% 47
\BOOKMARK [1][-]{section.349}{7.2 Time Reduction}{chapter.347}% 48
\BOOKMARK [1][-]{section.354}{7.3 Time reduction against hand optimized analysis}{chapter.347}% 49
\BOOKMARK [0][-]{chapter.356}{8. Correctness of Analysis Results}{}% 50
\BOOKMARK [0][-]{chapter.357}{9. Traversal Strategy Selection Precision}{}% 51
\BOOKMARK [0][-]{chapter.377}{10. Analysis on the Decision Tree Distribution}{}% 52
\BOOKMARK [0][-]{chapter.380}{11. Analysis on Traversal Optimization}{}% 53
\BOOKMARK [0][-]{chapter.382}{12. Case Studies}{}% 54
\BOOKMARK [1][-]{section.384}{12.1 API Precondition Mining \(APM\).}{chapter.382}% 55
\BOOKMARK [1][-]{section.387}{12.2 API Usage Mining \(AUM\).}{chapter.382}% 56
\BOOKMARK [0][-]{chapter.390}{13. Threats to Validity}{}% 57
\BOOKMARK [0][-]{chapter.391}{14. Related Work}{}% 58
\BOOKMARK [1][-]{section.392}{14.1 Mixing static and dynamic information.}{chapter.391}% 59
\BOOKMARK [1][-]{section.393}{14.2 Optimizing program analysis.}{chapter.391}% 60
\BOOKMARK [1][-]{section.394}{14.3 Ultra-large-scale source code mining.}{chapter.391}% 61
\BOOKMARK [1][-]{section.395}{14.4 Graph traversal optimization.}{chapter.391}% 62
\BOOKMARK [0][-]{chapter.396}{15. Conclusion and Future work}{}% 63
\BOOKMARK [1][-]{section.397}{15.1 Conclusion}{chapter.396}% 64
\BOOKMARK [1][-]{section.398}{15.2 Future Work}{chapter.396}% 65
\BOOKMARK [0][-]{chapter.400}{16. Appendix}{}% 66
